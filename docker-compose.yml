version: '3.8'

services:
  # Database Service
  tidb:
    image: pingcap/tidb:latest
    container_name: tidb
    ports:
      - "4000:4000"
      - "10080:10080"
    environment:
      - TIDB_HOST=0.0.0.0
    volumes:
      - tidb_data:/tmp/tidb
    # Remove health check - use time-based delays instead
    networks:
      - default

  # Database Initializer - ARM64 Compatible
  db-init:
    image: alpine:latest
    container_name: db-init
    depends_on:
      - tidb  # Simple dependency, no health check
    volumes:
      - ./init-db:/init-scripts
    command: |
      sh -c "
        echo '🗄️  Starting database initialization...'
        echo '📦 Installing MySQL client...'
        apk add --no-cache mysql-client
        echo '⏳ Waiting for TiDB to be fully ready (60 seconds)...'
        sleep 60
        echo '🔄 Testing TiDB connection...'
        until mysql -h tidb -P 4000 -u root -e 'SELECT 1' 2>/dev/null; do
          echo '⏳ TiDB not ready yet, waiting 5 more seconds...'
          sleep 5
        done
        echo '📊 Creating testdb database and tables...'
        mysql -h tidb -P 4000 -u root -v < /init-scripts/init.sql
        echo '✅ Database initialization completed!'
        echo '🔍 Verifying database creation...'
        mysql -h tidb -P 4000 -u root -e 'SHOW DATABASES; USE testdb; SHOW TABLES;'
        echo '🎯 testdb is ready for API connection!'
      "
    networks:
      - default

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 15s
      timeout: 10s
      retries: 8
      start_period: 45s
    networks:
      - default

  # Backend API - Waits for database initialization to complete
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: todo-api
    depends_on:
      db-init:
        condition: service_completed_successfully  # API waits for db-init to finish!
      kafka:
        condition: service_healthy
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=tidb
      - DB_PORT=4000
      - DB_USER=root
      - DB_PASSWORD=
      - DB_NAME=testdb  # This will exist after db-init completes
      - KAFKA_BROKER=kafka:9092
      - JWT_SECRET=your-secret-key-here
    volumes:
      - ./api:/app
      - /app/node_modules
    restart: unless-stopped
    networks:
      - default

  # Consumer - Waits for both Kafka and API
  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: todo-consumer
    depends_on:
      kafka:
        condition: service_healthy  # Keep this since Kafka health check works
      api:
        condition: service_started
    environment:
      - KAFKA_BROKER=kafka:9092
      - NODE_ENV=production
    volumes:
      - ./consumer:/app
      - /app/node_modules
    restart: unless-stopped
    command: sh -c "sleep 15 && npm start"  # Extra delay for safety
    networks:
      - default

  # React Frontend
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: todo-client
    depends_on:
      api:
        condition: service_started
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - NODE_ENV=production
    volumes:
      - ./client:/app
      - /app/node_modules
    restart: unless-stopped
    networks:
      - default

networks:
  default:
    name: todo-monitoring-app_default

volumes:
  tidb_data: